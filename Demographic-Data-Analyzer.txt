import pandas as pd
import numpy as np


def calculate_demographic_data(print_data=True):
    # Read data from file
    df = pd.read_csv(filepath_or_buffer = 'adult.data.csv')

    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df['race'].value_counts() 

    # What is the average age of men?
    average_age_men = round(df[df.sex == 'Male'].age.mean(), 1)

    # What is the percentage of people who have a Bachelor's degree?
    percentage_bachelors = round((df['education'][df.education == 'Bachelors'].count() / df['education'].count()) * 100, 1)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?
    
    # with and without `Bachelors`, `Masters`, or `Doctorate`
    higher_education_arr = np.array(['Bachelors', 'Masters','Doctorate'])
  
    higher_education = df[df['education'].isin(higher_education_arr)]
    lower_education = df[~df['education'].isin(higher_education_arr)]

    # percentage with salary >50K
    higher_education_rich = round((higher_education[higher_education.salary == '>50K'].salary.count() / higher_education['salary'].count()) * 100, 1)
    lower_education_rich = round((lower_education[lower_education.salary == '>50K'].salary.count() / lower_education['salary'].count()) * 100, 1)

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = df['hours-per-week'].min()

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    num_min_workers = df[(df['hours-per-week'] == min_work_hours) & (df.salary == '>50K')]['hours-per-week'].count()
    x = df[df['hours-per-week'] == min_work_hours]['hours-per-week'].count()
    rich_percentage = (num_min_workers / x) * 100

    # What country has the highest percentage of people that earn >50K?
    more_than_50K_series = df[df.salary == '>50K']['native-country'].value_counts()
    all_series = df['native-country'].value_counts()
    pct_series = (more_than_50K_series / all_series) * 100
    highest_earning_country = pct_series[pct_series == pct_series.max()].index[0]
    highest_earning_country_percentage = round(pct_series.max(), 1)

    # Identify the most popular occupation for those who earn >50K in India.
    occupation_series = df[(df.salary == '>50K') & (df['native-country'] == 'India')].occupation.value_counts()
    top_IN_occupation = occupation_series[occupation_series == occupation_series.max()].index[0]

    # DO NOT MODIFY BELOW THIS LINE

    if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
